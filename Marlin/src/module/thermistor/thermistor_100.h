/**
 * Marlin 3D Printer Firmware
 * Copyright (c) 2019 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
 *
 * Based on Sprinter and grbl.
 * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 */
#pragma once

// R25 = 100 kOhm, beta25/50 = 4250 K, 71.5 kOhm pull-up, bed thermistor

//https://www.digikey.com/product-detail/en/murata-electronics-north-america/NXFT15WF104FA1B025/490-11856-ND/5333691
//https://www.digikey.com/product-detail/en/murata-electronics/NXRT15WF104FA1B040/490-7169-ND/3900396


// Custom Cocoa Press thermistor table, based on thermistor table 1
//multiplied by 10 for 10th degree accuracy
const temp_entry_t temptable_100[] PROGMEM = {

{OV(1),1600}, //just to add max bounds
{OV(69.2688),1250},
{OV(70.9703),1240},
{OV(72.6657),1230},
{OV(74.3552),1220},
{OV(76.2253),1210},
{OV(78.0881),1200},
{OV(80.1287),1190},
{OV(82.1605),1180},
{OV(84.1836),1170},
{OV(86.198),1160},
{OV(88.3857),1150},
{OV(90.7442),1140},
{OV(92.9108),1130},
{OV(95.2466),1120},
{OV(97.749),1110},
{OV(100.238),1100},
{OV(102.7136),1090},
{OV(105.3514),1080},
{OV(108.1484),1070},
{OV(110.9285),1060},
{OV(113.6917),1050},
{OV(116.6094),1040},
{OV(119.6783),1030},
{OV(122.7266),1020},
{OV(125.922),1010},
{OV(129.0948),1000},
{OV(132.5757),990},
{OV(136.0295),980},
{OV(139.4567),970},
{OV(143.1801),960},
{OV(146.8722),950},
{OV(150.6921),940},
{OV(154.6358),930},
{OV(158.6997),920},
{OV(162.7258),910},
{OV(167.0199),900},
{OV(171.4225),890},
{OV(175.78),880},
{OV(180.3891),870},
{OV(185.0946),860},
{OV(189.8925),850},
{OV(194.9216),840},
{OV(200.0315),830},
{OV(205.2181),820},
{OV(210.4773),810},
{OV(215.9409),800},
{OV(221.5992),790},
{OV(227.3107),780},
{OV(233.0715),770},
{OV(239.1337),760},
{OV(245.2298),750},
{OV(251.4799),740},
{OV(257.8746),730},
{OV(264.5239),720},
{OV(271.1766),710},
{OV(278.0608),700},
{OV(285.0471),690},
{OV(292.1265),680},
{OV(299.399),670},
{OV(306.8491),660},
{OV(314.3568),650},
{OV(322.1187),640},
{OV(329.9129),630},
{OV(337.9273),620},
{OV(346.0454),610},
{OV(354.3465),600},
{OV(362.8103),590},
{OV(371.3285),580},
{OV(379.9748),570},
{OV(388.8146),560},
{OV(397.7411),550},
{OV(406.8161),540},
{OV(416.0162),530},
{OV(425.3186),520},
{OV(434.7016),510},
{OV(444.2144),500},
{OV(453.8306),490},
{OV(463.5249),480},
{OV(473.3364),470},
{OV(483.236),460},
{OV(493.196),450},
{OV(503.2469),440},
{OV(513.3039),430},
{OV(523.5008),420},
{OV(533.6985),410},
{OV(543.9202),400},
{OV(554.1835),390},
{OV(564.5003),380},
{OV(574.7934),370},
{OV(585.1162),360},
{OV(595.4337),350},
{OV(605.7502),340},
{OV(616.0319),330},
{OV(626.3137),320},
{OV(636.5272),310},
{OV(646.703),300},
{OV(656.8349),290},
{OV(666.8879),280},
{OV(676.8814),270},
{OV(686.7803),260},
{OV(696.5986),250},
{OV(706.3234),240},
{OV(715.9414),230},
{OV(725.4392),220},
{OV(734.8214),210},
{OV(744.0721),200},
{OV(753.2072),190},
{OV(762.1787),180},
{OV(771.0143),170},
{OV(779.7078),160},
{OV(788.2402),150},
{OV(796.6057),140},
{OV(804.8079),130},
{OV(812.8382),120},
{OV(820.6967),110},
{OV(828.3816),100},
{OV(835.8898),90},
{OV(843.2104),80},
{OV(850.353),70},
{OV(857.3056),60},
{OV(864.0797),50},
{OV(870.6626),40},
{OV(877.0622),30},
{OV(883.2749),20},
{OV(889.3046),10},
{OV(895.1467),0},
{OV(900.8034),-10},
{OV(906.2816),-20},
{OV(911.5777),-30},
{OV(916.6936),-40},
{OV(921.637),-50},
{OV(926.403),-60},
{OV(930.999),-70},
{OV(935.4285),-80},
{OV(939.6906),-90},
{OV(943.792),-100},
{OV(947.7335),-110},
{OV(951.5213),-120},
{OV(955.1562),-130},
{OV(958.6442),-140},
{OV(961.9882),-150},
{OV(965.1911),-160},
{OV(968.2582),-170},
{OV(971.1927),-180},
{OV(973.9984),-190},
{OV(976.6793),-200},
{OV(979.2398),-210},
{OV(981.683),-220},
{OV(984.0136),-230},
{OV(986.2351),-240},
{OV(988.3512),-250},
{OV(990.3659),-260},
{OV(992.283),-270},
{OV(994.1057),-280},
{OV(995.8382),-290},
{OV(997.4836),-300},
{OV(999.0455),-310},
{OV(1000.5274),-320},
{OV(1001.9325),-330},
{OV(1003.2639),-340},
{OV(1004.525),-350},
{OV(1005.7187),-360},
{OV(1006.848),-370},
{OV(1007.9157),-380},
{OV(1008.9248),-390},
{OV(1009.8779),-400},
{OV(1023),-450}, //just to add max bounds
};